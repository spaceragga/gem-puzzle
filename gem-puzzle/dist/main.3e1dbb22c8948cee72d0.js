/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("// const post = new Post ('Webpack');\r\n\r\n// Начнем с того, что создадим класс Game, который будет представлять собой Пятнашки в целом. \r\n// Он будет получать в качестве параметров контекст рисования и размер одной пятнашки.\r\n\r\n\r\n//Определим переменную arr, хранящую схему игрового поля, \r\n// и переменную clicks, в которой будем хранить количество ходов игрока. \r\n// Кроме того, создадим метод getClicks, который будет возвращать количество ходов. \r\n// Он нам пригодится в конце игры, при выигрыше.\r\n\r\nfunction Game(context, cellSize){\r\n    var arr = [\r\n      [1,2,3,4],\r\n      [5,6,7,8],\r\n      [9,10,11,12],\r\n      [13,14,15,0]\r\n    ];\r\n    var clicks = 0;\r\n \r\n    this.getClicks = function() {\r\n\t    return clicks;\r\n    };\r\n  \r\n    //— метод cellView получает координаты и рисует в них пятнашку.\r\n  function cellView(x, y){\r\n\t\tcontext.fillStyle = \"#FFB93B\";\r\n\t  context.fillRect(\r\n      x+1, \r\n      y+1, \r\n      cellSize-2, \r\n      cellSize-2\r\n    );\r\n\t}\r\n  \r\n    //— метод numView определяет, как выглядит текст (цифра).\r\n  function numView(){\r\n\t\tcontext.font = \"bold \"+ \r\n      (cellSize/2) + \"px Sans\";\r\n    context.textAlign = \"center\";\r\n    context.textBaseline = \"middle\";\r\n    context.fillStyle = \"#222\";\r\n\t}\r\n  \r\n    //— метод getNullCell возвращает позицию пустой клетки в массиве.\r\n\r\n  this.getNullCell = function(){\r\n\t\tfor (var i = 0; i<4; i++){\r\n\t\t\tfor (var j=0; j<4; j++){\r\n\t\t\t\tif(arr[j][i] === 0){\r\n\t\t\t\t\treturn {'x': i, 'y': j};\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n  \r\n    //— метод draw отрисовывает всю игру.\r\n\r\n  this.draw = function() {\r\n\t\tfor (var i = 0; i < 4; i++) {\r\n\t\t\tfor (var j = 0; j < 4; j++) {\r\n\t\t\t\tif (arr[i][j] > 0) {\r\n\t\t\t\t\tcellView(\r\n            j * cellSize, \r\n            i * cellSize\r\n          );\r\n\t\t\t\t\tnumView();\r\n\t\t\t\t\tcontext.fillText(\r\n            arr[i][j], \r\n            j * cellSize + cellSize / 2,\r\n            i * cellSize + cellSize / 2\r\n          );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n  \r\n\r\n    //— метод move обсчитывает перемещение пятнашки на пустую позицию и редактирует текущую схему игрового поля.\r\n\r\n  this.move = function(x, y) {\r\n\t\tvar nullX = this.getNullCell().x;\r\n\t\tvar nullY = this.getNullCell().y;\r\n\t\tif (\r\n      ((x - 1 == nullX || x + 1 == nullX) && y == nullY) \r\n      || ((y - 1 == nullY || y + 1 == nullY) && x == nullX)\r\n    ) {\r\n\t\t\tarr[nullY][nullX] = arr[y][x];\r\n\t\t\tarr[y][x] = 0;\r\n\t\t\tclicks++;\r\n\t\t\t// count.innerHTML = `Count: ${game.getClicks() + 1}`;\r\n\t\t}\r\n\r\n\t};\r\n  \r\n\r\n    //— метод victory проверяет, сложены ли пятнашки.\r\n\r\n  this.victory = function() {\r\n\t\tvar e = [[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,0]];\r\n\t\tvar res = true;\r\n\t\tfor (var i = 0; i < 4; i++) {\r\n\t\t\tfor (var j = 0; j < 4; j++) {\r\n\t\t\t\tif (e[i][j] != arr[i][j]) {\r\n\t\t\t\t\tres = false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn res;\r\n\t};\r\n  \r\n    //— метод getRandomBool — вспомогательный, возвращает случайное логическое значение.\r\n\r\n  function getRandomBool() {\r\n\t\tif (Math.floor(Math.random() * 2) === 0) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t}\r\n    \r\n    \r\n    //— метод mix перемешивает пятнашки заданное количество раз.\r\n\r\n\tthis.mix = function(stepCount) {\r\n\t\tconsole.log(stepCount);\r\n\t\tvar x,y;\r\n\t\tfor (var i = 0; i < stepCount; i++) {\r\n\t\t\tvar nullX = this.getNullCell().x;\r\n\t\t\tvar nullY = this.getNullCell().y;\r\n\t\t\tvar hMove = getRandomBool();\r\n\t\t\tvar upLeft = getRandomBool();\r\n\t\t\tif (!hMove && !upLeft) { y = nullY; x = nullX - 1;}\r\n\t\t\tif (hMove && !upLeft)  { x = nullX; y = nullY + 1;}\r\n\t\t\tif (!hMove && upLeft)  { y = nullY; x = nullX + 1;}\r\n\t\t\tif (hMove && upLeft)   { x = nullX; y = nullY - 1;}\r\n\t\t\tif (0 <= x && x <= 3 && 0 <= y && y <= 3) {\r\n\t\t\t\tthis.move(x, y);\r\n\t\t\t}\r\n\t\t}\r\n\t\tclicks = 0;\r\n\t};\r\n \r\n\tthis.getClicks = function() {\r\n\t\treturn clicks;\r\n\t};\r\n}\r\n\r\n\r\n//Воспользуемся событием полной загрузки документа, определим наш холст, контекст рисования и создадим объект класса Game.\r\nwindow.onload = function(){\r\n\tconst mainInfo = document.createElement(\"div\");\r\n\tconst timer = document.createElement(\"span\");\r\n\tconst newDiv = document.createElement(\"CANVAS\");\r\n\tvar count = document.createElement(\"p\");\r\n\t\r\n\tdocument.body.insertAdjacentElement('afterbegin', mainInfo);\r\n\tmainInfo.insertAdjacentElement('afterbegin', count);\r\n\tmainInfo.appendChild(timer);\r\n\tmainInfo.insertAdjacentElement('afterend', newDiv);\r\n\r\n\tcount.innerHTML = `Count: 0`;\r\n\r\n\tcount.id = \"count\";\r\n    newDiv.id = \"canvas\";\r\n\r\n\tlet counte = 0;\r\n\tlet timerId = setInterval(() => {\r\n\t\tcounte += 1;\r\n\t\ttimer.innerHTML = `${Math.floor(counte / 60).toString().padStart(2, \"0\")}:${(counte % 60).toString().padStart(2, \"0\")}`;\r\n\t\t}, 1000);\r\n\r\n\t\t// const renderTimer = () => {\r\n\t\t// \tcounte += 1;\r\n\t\t// \ttimer.innerHTML = `${Math.floor(counte / 60).toString().padStart(2, \"0\")}:${(counte % 60).toString().padStart(2, \"0\")}`;\r\n\t\t//   }\r\n\t\t//   const timero = setInterval(renderTimer, 1000)\r\n\r\n\tvar canvas = document.getElementById(\"canvas\");\r\n\t    canvas.width  = 320;\r\n\t    canvas.height = 320;\r\n\tvar cellSize = canvas.width / 4;\r\n\tvar context = canvas.getContext(\"2d\");\r\n\tcontext.fillRect(0, 0, canvas.width, canvas.height);\r\n \r\n\tvar game = new Game(context, cellSize);\r\n\tgame.mix(300);\r\n\tgame.draw();\r\n\r\n\r\n\r\n    //обработка события клика:\r\n  canvas.onclick = function(e) {\r\n      console.log(e);\r\n      console.log(e.pageX);\r\n    var x = (e.pageX - canvas.offsetLeft) / cellSize | 0;\r\n    var y = (e.pageY - canvas.offsetTop)  / cellSize | 0;\r\n\tconsole.log(e.pageY, canvas.offsetTop, cellSize);\r\n\t// count.innerHTML = `Count: ${game.getClicks() + 1}`;\r\n    event(x, y); \r\n  };\r\n\r\n  canvas.ontouchend = function(e) {\r\n    var x = (e.touches[0].pageX - canvas.offsetLeft) / cellSize | 0;\r\n    var y = (e.touches[0].pageY - canvas.offsetTop)  / cellSize | 0;\r\n    \r\n    event(x, y);\r\n  };  \r\n\r\n  function event(x, y) { \r\n    game.move(x, y);\r\n    context.fillRect(0, 0, canvas.width, canvas.height);\r\n\tgame.draw();\r\n\tcount.innerHTML = `Count: ${game.getClicks()}`;\r\n\r\n    if (game.victory()) {\r\n      alert(\"Собрано за \"+game.getClicks()+\" касание!\"); \r\n      game.mix(300);\r\n      context.fillRect(0, 0, canvas.width, canvas.height);\r\n        game.draw(context, cellSize);\r\n    }\r\n  }\r\n}\r\n \r\n\n\n//# sourceURL=webpack://gem-puzzle/./index.js?");
/******/ })()
;